#include <iostream>
#include <list>
#include "Elevator.h"

using namespace std;

Elevator::Elevator() {

}

Elevator::Elevator(int init_floor, elevator_direction cur_direction) {
	initial_floor = init_floor;
	current_direction = cur_direction;
	current_load = 0;
}

Elevator::~Elevator() {

}

int Elevator::getCurrentLoad() {
	return current_load;
}

float Elevator::getCurrentFloor() {
	return current_floor;
}

elevator_state& Elevator::getCurrentState() {
	return current_state;
}

elevator_direction& Elevator::getCurrentDirection() {
	return current_direction;
}

void Elevator::setCurrentDirection(elevator_direction direction)_ {
	current_direction = direction;
}

void Elevator::takePassengers(int num_of_passengers) {
	current_load += num_of_passengers;
}

void Elevator::removePassengers(int num_of_passengers) {
	current_load -= num_of_passengers;
}

list<Passenger>& Elevator::getPassengers() {
	return passengers;
}

void Elevator::update() {
	if(current_direction == UP) {
		if(current_floor > 100.0) {
			current_floor -= 0.1;
			current_direction = DOWN;
		}
		else {
			current_floor += 0.1;
		}
	}
	else {
		if(current_floor < 0.0) {
			current_floor += 0.1;
			current_direction = UP;
		}
		else {
			current_floor -= 0.1;
		}
	}

	//Iterate list of passengers
	list<Passenger>::iterator passengers_it;
	for(passengers_it= passengers.begin(); passengers_it != passengers.end(); ++passengers_it) {
		cout << passengers_it->getDestinationFloor() << endl;

		passengers_it->addTravelTime(1);
	}
}

#ifndef __ELEVATOR_ENUM__
#define __ELEVATOR_ENUM__

enum elevator_state {STOPPED, STOPPING, MOVING_UP, MOVING_DOWN};
enum elevator_direction {UP, DOWN};
enum passenger_state {WAITING, RIDING, ARRIVED};

#endif
#ifndef __ELEVATOR_H__
#define __ELEVATOR_H__

#include <list>
#include "Passenger.h"
#include "ElevatorEnum.h"
#include "Updateable.h"

using namespace std;

class Elevator : public Updateable {

public:

	Elevator();
	Elevator(int, elevator_direction);
	~Elevator();

	static const int MAX_LOAD = 8;

	int getCurrentLoad();
	float getCurrentFloor();
	elevator_state& getCurrentState();
	elevator_direction& getCurrentDirection();

	void setCurrentDirection(elevator_direction);
	void takePassengers(int num_of_passengers = 1);
	void removePassengers(int num_of_passengers = 1);
	list<Passenger>& getPassengers();
	void update();

private:
	int current_load;
	float current_floor;
	elevator_state current_state;

	list<Passenger> passengers;

	int initial_floor;
	elevator_direction current_direction;

	static const float travel_speed = 1.0 / 10.0;

};

#endif


#include "Floor.h"

Floor::Floor() {


}

Floor::~Floor() {

}

queue<Passenger>& Floor::getPassengers() {
	return passengers;
}


