//============================================================================
// Name        : Module6_Probability.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include "Probability.h"

using namespace std;


Probability::Probability(double probIn)
{
	setProbability(probIn);
}

double Probability::getProbability() const
{
	return probability;
}

void Probability::setProbability(double probIn)
{
	if(probIn >=0 && probIn <=1)
	{
		probability = probIn;
	}
	else
	{
		throw invalid_argument("Event ranges should be from 0.0(never) to 1.0(certain)");

	}
}

double multiple(double a, double b) {
	return a * b;
}

double add(double a, double b) {
	return a + b;
}

double sub(double a, double b) {
	return a - b;
}

// done
Probability operator&(Probability eventA, Probability eventB)
{
	// P and B = P(A) x P(B)
	Probability result(
			multiple(
					eventA.getProbability(),	// P(A)
					eventB.getProbability()		// P(B)
			)
	);
	return result;
}

// done
Probability operator|(Probability eventA, Probability eventB)
{
	// P or B = (P(A) + P(B)) - P(A and B)
	Probability result(
			sub(
					add(
							eventA.getProbability(),	// P(A)
							eventB.getProbability()		// P(B)
					),
					(eventA & eventB).getProbability())	// P(A and B)
	);
	return result;
}

// done
Probability operator~(Probability eventA)
{
	// A not occuring = 1 - P(A)
	Probability result(
			sub(
					1,							// 1
					eventA.getProbability()		// P(A)
			)
	);
	return result;
}



Probability operator^(Probability eventA, Probability eventB)
{
	// Either A or B but not both = P(A and ~B) + P(P and ~A)
	Probability result(
			add(
					(eventA & (~eventB)).getProbability(),	// A and ~B
					(eventB & (~eventA)).getProbability()	// B and ~A
			)
	);
	return result;
}

// done
Probability operator-(Probability eventA, Probability eventB)
{
	Probability result(sub(eventA.getProbability(), ((eventA & eventB).getProbability())));
	return result;
}


/*
double operator&(Probability eventA, Probability eventB)
{
	return Probability(eventA.getProbability() * eventB.getProbability());
}

double operator|(Probability eventA, Probability eventB)
{
	return ((eventA + eventB) - (eventA & eventB));
}

double operator~(Probability eventA)
{
	return (1 - eventA.getProbability());
}

double operator^(Probability eventA, Probability eventB)
{
	return (eventA & (~eventB)) + (eventB & (~eventA));
}

double operator-(Probability eventA, Probability eventB)
{
	return (eventA - (eventA & eventB));
}

double operator+(Probability eventA, Probability eventB)
{
	return (eventA.getProbability() + eventB.getProbability());
}

double operator-(Probability eventA, double eventB)
{
	return eventA.getProbability() - eventB;
}*/
