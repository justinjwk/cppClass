#include <iostream>
#include <string>
#include <stdlib.h>
#include "Card.h"
#include "DeckOfCards.h"
#include "Hand.h"
using namespace std;

Hand::Hand() {}

void BubbleSort( Card h[5] )
{
  int i, j;
  for ( i=0; i<4; i++ )
    {
      for ( j=0; j < 4-i; j++ )
  {
	  if ( h[j].getValue() > h[j+1].getValue() )
	    {
	      //swaps values
	      Card temp = h[j];
	      h[j] = h[j+1];
	      h[j+1] = temp;
	    }
	}
    }
}

Hand::Hand( DeckOfCards a, PLAYER_TYPE o )
{
  Card temp[5];

  for ( int i=0; i<5; i++ )
    temp[i] = a.dealCard();
  BubbleSort( temp );
  for ( int i=0; i<5; i++ )
    hand.push_back( temp[i] );

  //sets the owner of the hand, either player or computer
  playerType = o;
  handValue = unchecked;
}

vector<int> Hand::getHighest()
{ return highList; }

int Hand::getHighPair()
{ return highPair; }

int Hand::getLowPair()
{ return lowPair; }

HAND_VALUE Hand::getHandValue()
{ return handValue; }

void Hand::printHand( string s )
{
  if ( playerType == player )
    cout << "\nPlayer";
  else
    cout << "\nComputer";

  cout << "'s " << s << " Hand:\n";
  for ( int i=0; i<5; i++ )
    cout << hand[i].toString() << endl;
}

//additional function for game.cc
void Hand::findHighCard()
{
	//error checking
	if ( handValue == 0 )
	{
		cout << "\nError, hand_value was never checked/updated\n";
		return;
	}

	//straight and flushes
	else if ( handValue == 5 || handValue == 6 )
	{
		//checks for straight with Ace as low card
		if ( handValue == 5 && hand[4].getValue() == 14 )
			highList.push_back( hand[3].getValue() );
		else
			highList.push_back( hand[4].getValue() );
	}
	//pair, two pair, three of a kind, four of a kind
	else if ( handValue < 5 || handValue == 7 )
	{
		for ( int i=0; i<5; i++ )
		{
			//pushes non-used card into the vector first
			if ( hand[i].getValue() != highPair && hand[i].getValue() != lowPair )
				highList.push_back( hand[i].getValue() );
		}
	}
}

void Hand::setTypeOfHand()
{
  if ( four_kind_check() )
    handValue = four_kind;
  else if ( flush_check() )
    handValue = a_flush;
  else if ( straight_check() )
    handValue = a_straight;
  else if ( three_kind_check() )
    handValue = three_kind;
  else if ( two_pair_check() )
    handValue = two_pair;
  else if ( onePairCheck() )
    handValue = one_pair;
  else
    handValue = high_card;

  findHighCard();
}

bool Hand::onePairCheck()
{
	for ( int i=0; i<5; i++ )
	{
		for ( int j=0; j<5; j++ )
		{
			if ( i != j )
			{
				if ( hand[i].getValue() == hand[j].getValue() )
				{
					highPair = hand[i].getValue();
					return true;
				}
			}
		}
	}
	return false;
}

bool Hand::two_pair_check()
{
  Card first_card, second_card; //stores first pair (obviously two cards)
  int i, j;

  for ( i=0; i<5; i++ )
    {
      for ( j=0; j<5; j++ )
        {
          if ( i != j )
	    if ( hand[i].getValue() == hand[j].getValue() )
	      {
		first_card = hand[i];
		second_card = hand[j];
	      }
        }
    }

  for ( i=0; i<5; i++ )
    {
      for ( j=0; j<5; j++ )
        {
          if ( i != j )
            {
              if ( hand[i].getValue() == hand[j].getValue() )
		if ( hand[i] != first_card && hand[j] != first_card &&
		     hand[i] != second_card && hand[j] != second_card )
		  {
		    if ( hand[i].getValue() > first_card.getValue() )
		      {
			highPair = hand[i].getValue();
			lowPair = first_card.getValue();
		      }
		    else
		      {
			highPair = first_card.getValue();
			lowPair = hand[i].getValue();
		      }
		    return true;
		  }
	    }
        }
    }
  return false;
}

bool Hand::three_kind_check()
{
  //123
  if ( hand[0].getValue() == hand[1].getValue() &&
       hand[1].getValue() == hand[2].getValue() )
    {
      highPair = hand[2].getValue();
      return true;
    }
  //234
  if ( hand[1].getValue() == hand[2].getValue() &&
       hand[2].getValue() == hand[3].getValue() )
    {
      highPair = hand[3].getValue();
      return true;
    }
  //345
  if ( hand[2].getValue() == hand[3].getValue() &&
       hand[3].getValue() == hand[4].getValue() )
    {
      highPair = hand[4].getValue();
      return true;
    }

  return false;
}

bool Hand::four_kind_check()
{
  if ( (hand[1].getValue() == hand[2].getValue()) &&
       (hand[2].getValue() == hand[3].getValue()) )
    {
      if ( hand[0].getValue() == hand[1].getValue() )
	{
	  highPair = hand[2].getValue();
	  return true;
	}
      if ( hand[4].getValue() == hand[1].getValue() )
	{
	  highPair = hand[2].getValue();
	  return true;
	}
    }

  return false;
}

bool Hand::flush_check()
{
  if ( hand[0].getSuit() == hand[1].getSuit() &&
       hand[0].getSuit() == hand[2].getSuit() &&
       hand[0].getSuit() == hand[3].getSuit() &&
       hand[0].getSuit() == hand[4].getSuit() )
    return true;
  return false;
}

bool Hand::straight_check()
{
  int temp = hand[0].getValue();

  //Checks for Ace,2,3,4,5
  if ( (hand[0].getValue() == 2) &&
       (hand[1].getValue() == 3) &&
       (hand[2].getValue() == 4) &&
       (hand[3].getValue() == 5) &&
       (hand[4].getValue() == 14) )
    return true;

  //Checks for Sequential Straight
  if ( (hand[1].getValue() == temp+1) &&
       (hand[2].getValue() == temp+2) &&
       (hand[3].getValue() == temp+3) &&
       (hand[4].getValue() == temp+4) )
    return true;

  return false;
}
