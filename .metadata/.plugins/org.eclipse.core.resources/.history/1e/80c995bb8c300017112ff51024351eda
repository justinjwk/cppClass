#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <list>
#include <map>
#include <queue>
#include <cmath>
#include <vector>

#include "ElevatorEnum.h"
#include "Elevator.h"
#include "Passenger.h"
#include "Floor.h"

using namespace std;

// Read data from file into map
map<int, map<string, int> > getData() {
	map<int, map<string, int> > records;

	ifstream infile("Mod10_Assignment_Elevators.csv");

	while (infile) {
		string s;
		if (!getline(infile, s)) {
			break;
		}

		istringstream ss(s);

		int start_time;
		int start_floor;
		int end_floor;
		int value;
		int index = 0;
		while(ss >> value) {
			switch(index) {
			case 0:
				start_time = value;
				break;
			case 1:
				start_floor = value;
				break;
			case 2:
				end_floor = value;
				break;
			}

			if (ss.peek() == ',') {
				ss.ignore();
			}

			index++;
		}

		map<string, int> record;

		record["start_floor"] = start_floor;
		record["end_floor"] = end_floor;

		records[start_time] = record;
	}

	return records;
}

vector<Floor> floors;
list<Elevator> elevators;
list<int> wait_times;
list<int> travel_times;
map<int, queue<Passenger> > building;
map<int, map<string, int> > records = getData();

int main() {

	// Initialize all 100 floors
	for (int floor_number = 0; floor_number < 100; floor_number++) {
		floors.push_back(Floor());
	}


	// For debugging
	for (map<int, map<string, int> >::iterator o_it = records.begin(); o_it != records.end(); ++o_it) {
		cout << o_it->first << endl;

		cout << o_it->second["start_floor"] << "-" << o_it->second["end_floor"] << endl;

		for (map<string, int>::iterator i_it = o_it->second.begin(); i_it != o_it->second.end(); ++i_it) {
			cout << i_it->first << " - " < i_it->second << endl;
		}
	}



	// Initialize all four elevators

}
